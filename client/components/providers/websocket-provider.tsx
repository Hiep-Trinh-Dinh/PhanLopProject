"use client";

import React, { createContext, useContext, useEffect, useState, useCallback, useRef } from 'react';
import { useWebSocket } from '@/hooks/use-websocket';
// @ts-ignore
import { IMessage, StompSubscription } from '@stomp/stompjs';
import { useToast } from '@/hooks/use-toast';

interface WebSocketContextType {
  connected: boolean;
  connecting: boolean;
  sendMessage: (destination: string, body: any) => void;
  subscribe: (destination: string, callback: (message: IMessage) => void) => StompSubscription | null;
  unsubscribe: (subscription: StompSubscription) => void;
  userId: number | null;
  client: any;
  activateConnection: () => void;
  activateConnectionWithPromise: () => Promise<boolean>;
  connectionActivated: boolean;
  isClientActive: () => boolean;
  ensureClient: () => boolean;
}

const WebSocketContext = createContext<WebSocketContextType | null>(null);

export const useWebSocketContext = () => {
  const context = useContext(WebSocketContext);
  if (!context) {
    throw new Error('useWebSocketContext must be used within a WebSocketProvider');
  }
  return context;
};

interface WebSocketProviderProps {
  children: React.ReactNode;
}

export const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ children }) => {
  const [userId, setUserId] = useState<number | null>(null);
  const [connectionActivated, setConnectionActivated] = useState(false);
  const isMountedRef = useRef(true);
  const lastActivationAttemptRef = useRef(0);
  const activationSuccessRef = useRef(false);
  const { toast } = useToast();
  
  // T·∫°o m·ªôt state ƒë·ªÉ x√°c ƒë·ªãnh khi n√†o n√™n k·∫øt n·ªëi WebSocket
  const [shouldConnect, setShouldConnect] = useState(false);
  const [isRetrying, setIsRetrying] = useState(false);
  
  // Ref ƒë·ªÉ theo d√µi ƒë√£ th·ª≠ k·∫øt n·ªëi WebSocket
  const hasTriedConnectionRef = useRef(false);
  
  // ƒê√°nh d·∫•u component unmounted ƒë·ªÉ tr√°nh c√°c thao t√°c kh√¥ng c·∫ßn thi·∫øt
  useEffect(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  
  // L·∫•y userId t·ª´ cookie ho·∫∑c localStorage khi component mount
  useEffect(() => {
    const fetchUserInfo = async () => {
      try {
        // Th·ª≠ l·∫•y t·ª´ API /api/auth/me
        const response = await fetch('/api/auth/me', {
          credentials: 'include'
        });
        if (response.ok) {
          const data = await response.json();
          setUserId(data.id);
          // Khi c√≥ userId, cho ph√©p k·∫øt n·ªëi WebSocket
          setShouldConnect(true);
        }
      } catch (error) {
        console.error('Error fetching user info:', error);
      }
    };

    fetchUserInfo();
  }, []);
  
  const websocket = useWebSocket({
    url: `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080'}/ws`,
    onConnect: () => {
      console.log("‚úÖ WebSocket ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng");
      if (isMountedRef.current) {
        setConnectionActivated(true);
        activationSuccessRef.current = true;
        setIsRetrying(false);
        if (userId) { // Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
          toast({
            title: "K·∫øt n·ªëi th·ªùi gian th·ª±c",
            description: "ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn m√°y ch·ªß",
          });
        }
      }
    },
    onDisconnect: () => {
      console.log("Ng·∫Øt k·∫øt n·ªëi t·ª´ m√°y ch·ªß");
      if (isMountedRef.current) {
        setConnectionActivated(false);
        activationSuccessRef.current = false;
      }
    },
    onError: (error) => {
      // Kh√¥ng hi·ªÉn th·ªã l·ªói n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
      if (userId && isMountedRef.current) {
        console.error("L·ªói k·∫øt n·ªëi:", error);
        if (!isRetrying) {
          toast({
            title: "L·ªói k·∫øt n·ªëi", 
            description: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß th·ªùi gian th·ª±c, ƒëang th·ª≠ l·∫°i...",
            variant: "error"
          });
          setIsRetrying(true);
        }
      }
    },
    reconnectDelay: 5000
  });

  // Ph∆∞∆°ng th·ª©c k√≠ch ho·∫°t k·∫øt n·ªëi c√≥ th·ªÉ g·ªçi t·ª´ b√™n ngo√†i
  const activateConnection = useCallback(() => {
    // Tr√°nh k√≠ch ho·∫°t nhi·ªÅu l·∫ßn trong kho·∫£ng th·ªùi gian ng·∫Øn
    const now = Date.now();
    if (now - lastActivationAttemptRef.current < 2000) {
      console.log("‚è≥ ƒêang ch·ªù activation attempt tr∆∞·ªõc ƒë√≥...");
      return;
    }
    
    lastActivationAttemptRef.current = now;
    activationSuccessRef.current = false;
    
    // ƒê·∫£m b·∫£o client t·ªìn t·∫°i tr∆∞·ªõc khi k√≠ch ho·∫°t
    if (!websocket.client) {
      if (websocket.ensureClient()) {
        console.log("‚úÖ ƒê√£ t·∫°o l·∫°i WebSocket client th√†nh c√¥ng, ti·∫øp t·ª•c k√≠ch ho·∫°t");
      } else {
        console.error("‚ùå Kh√¥ng th·ªÉ k√≠ch ho·∫°t: WebSocket client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o v√† kh√¥ng th·ªÉ t·∫°o l·∫°i");
        return;
      }
    }
    
    try {
      const clientActive = websocket.client && websocket.client.active;
      // Ki·ªÉm tra xem client c√≤n t·ªìn t·∫°i v√† c√≥ th·ªÉ k√≠ch ho·∫°t kh√¥ng
      if (websocket.client && !clientActive && !connectionActivated) {
        console.log("üöÄ ƒêang k√≠ch ho·∫°t k·∫øt n·ªëi WebSocket");
        // Th·ª≠ s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi activateClientWithPromise
        websocket.activateClientWithPromise()
          .then(success => {
            console.log(`‚úÖ K√≠ch ho·∫°t WebSocket ${success ? 'th√†nh c√¥ng' : 'kh√¥ng th√†nh c√¥ng'}`);
            if (success && isMountedRef.current) {
              setConnectionActivated(true);
              activationSuccessRef.current = true;
            }
          })
          .catch(error => {
            console.error("‚ùå L·ªói khi k√≠ch ho·∫°t WebSocket:", error);
            if (isMountedRef.current) {
              setConnectionActivated(false);
              activationSuccessRef.current = false;
            }
          });
      } else if (connectionActivated || (websocket.client && websocket.client.active)) {
        console.log("‚úÖ WebSocket ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t tr∆∞·ªõc ƒë√≥");
        activationSuccessRef.current = true;
        if (websocket.client && websocket.client.active && !connectionActivated && isMountedRef.current) {
          setConnectionActivated(true);
        }
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi k√≠ch ho·∫°t WebSocket:", error);
      // Reset tr·∫°ng th√°i khi c√≥ l·ªói
      if (isMountedRef.current) {
        setConnectionActivated(false);
        activationSuccessRef.current = false;
      }
    }
  }, [websocket.client, websocket.ensureClient, websocket.activateClientWithPromise, connectionActivated]);

  // Ph∆∞∆°ng th·ª©c k√≠ch ho·∫°t k·∫øt n·ªëi v·ªõi Promise cho ph√©p ƒë·ª£i k·∫øt qu·∫£
  const activateConnectionWithPromise = useCallback(async (): Promise<boolean> => {
    try {
      // N·∫øu component ƒë√£ unmount, tr·∫£ v·ªÅ false
      if (!isMountedRef.current) {
        console.log("‚ö†Ô∏è Kh√¥ng k√≠ch ho·∫°t k·∫øt n·ªëi v√¨ component ƒë√£ unmount");
        return false;
      }
      
      console.log("üöÄ ƒêang k√≠ch ho·∫°t k·∫øt n·ªëi WebSocket v·ªõi Promise - m·ªôt l·∫ßn duy nh·∫•t");
      
      // N·∫øu ƒë√£ k·∫øt n·ªëi, tr·∫£ v·ªÅ true ngay l·∫≠p t·ª©c
      if (websocket.client && websocket.client.connected) {
        console.log("‚úÖ WebSocket ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi tr∆∞·ªõc ƒë√≥");
        return true;
      }
      
      // Tr√°nh k√≠ch ho·∫°t nhi·ªÅu l·∫ßn trong kho·∫£ng th·ªùi gian ng·∫Øn
      const now = Date.now();
      if (now - lastActivationAttemptRef.current < 2000) {
        console.log("‚è≥ Kh√¥ng th·ª≠ k·∫øt n·ªëi l·∫°i do ƒë√£ k√≠ch ho·∫°t g·∫ßn ƒë√¢y");
        return false; // Tr·∫£ v·ªÅ false thay v√¨ throw error
      }
      
      lastActivationAttemptRef.current = now;
      
      // ƒê·∫£m b·∫£o client t·ªìn t·∫°i
      if (!websocket.client && !websocket.ensureClient()) {
        console.log("‚ùå Kh√¥ng th·ªÉ t·∫°o WebSocket client");
        return false;
      }
      
      // Ki·ªÉm tra l·∫ßn cu·ªëi tr∆∞·ªõc khi k√≠ch ho·∫°t
      if (!isMountedRef.current) {
        console.log("‚ö†Ô∏è Ph√°t hi·ªán component unmounting tr∆∞·ªõc khi k√≠ch ho·∫°t, h·ªßy thao t√°c");
        return false;
      }
      
      // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c Promise t·ª´ hook - c√≥ th·ªÉ tr·∫£ v·ªÅ false thay v√¨ throw error
      setIsRetrying(true);
      const success = await websocket.activateClientWithPromise();
      
      // Ki·ªÉm tra l·∫°i xem component c√≤n mounted kh√¥ng
      if (!isMountedRef.current) {
        console.log("‚ö†Ô∏è Component ƒë√£ unmount trong qu√° tr√¨nh k√≠ch ho·∫°t, kh√¥ng c·∫≠p nh·∫≠t state");
        return success;
      }
      
      if (success) {
        setConnectionActivated(true);
        activationSuccessRef.current = true;
      }
      
      setIsRetrying(false);
      return success;
    } catch (error) {
      // Ch·ªâ c·∫≠p nh·∫≠t state n·∫øu component v·∫´n c√≤n mounted
      if (isMountedRef.current) {
        console.error("‚ùå L·ªói khi k√≠ch ho·∫°t WebSocket v·ªõi Promise:", error);
        setConnectionActivated(false);
        activationSuccessRef.current = false;
        setIsRetrying(false);
      }
      return false; // Lu√¥n tr·∫£ v·ªÅ false thay v√¨ throw error
    }
  }, [websocket.client, websocket.ensureClient, websocket.activateClientWithPromise, websocket.client?.connected]);

  // Ki·ªÉm tra k·∫øt n·ªëi ƒë·ªãnh k·ª≥ - KH√îNG t·ª± ƒë·ªông k√≠ch ho·∫°t l·∫°i
  useEffect(() => {
    if (!shouldConnect || !userId) return;
    
    // Th·ª≠ t·∫°o l·∫°i client n·∫øu kh√¥ng t·ªìn t·∫°i - ch·ªâ m·ªôt l·∫ßn
    if (!websocket.client) {
      console.log("‚è≥ WebSocket client ch∆∞a t·ªìn t·∫°i - th·ª≠ t·∫°o l·∫°i m·ªôt l·∫ßn");
      if (websocket.ensureClient()) {
        console.log("‚úÖ ƒê√£ t·∫°o WebSocket client th√†nh c√¥ng");
      } else {
        console.log("‚ùå Kh√¥ng th·ªÉ t·∫°o WebSocket client");
      }
    }
    
    console.log("üîÑ Thi·∫øt l·∫≠p ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi - kh√¥ng t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i");
    
    // Ki·ªÉm tra k·∫øt n·ªëi m·ªói 30 gi√¢y - ch·ªâ ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i, kh√¥ng th·ª≠ k·∫øt n·ªëi l·∫°i
    const connectionCheckInterval = setInterval(() => {
      // Ki·ªÉm tra xem WebSocket c√≤n t·ªìn t·∫°i kh√¥ng
      if (!websocket.client) {
        console.log("‚ÑπÔ∏è WebSocket client kh√¥ng t·ªìn t·∫°i - kh√¥ng th·ª≠ t·∫°o l·∫°i t·ª± ƒë·ªông");
        return;
      }
      
      const client = websocket.client;
      const clientActive = client && client.connected;
      
      // C·∫≠p nh·∫≠t UI tr·∫°ng th√°i khi ph√°t hi·ªán kh√¥ng k·∫øt n·ªëi
      if (!clientActive && userId && isMountedRef.current) {
        console.log("‚ÑπÔ∏è WebSocket kh√¥ng k·∫øt n·ªëi - kh√¥ng t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i");
        // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng nh∆∞ng kh√¥ng th·ª≠ k·∫øt n·ªëi l·∫°i
        if (!isRetrying) {
          toast({
            title: "K·∫øt n·ªëi th·ªùi gian th·ª±c kh√¥ng kh·∫£ d·ª•ng",
            description: "M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông. Vui l√≤ng t·∫£i l·∫°i trang ƒë·ªÉ th·ª≠ l·∫°i.",
            variant: "error"
          });
          setIsRetrying(true);
        }
      }
    }, 30000);
    
    return () => {
      clearInterval(connectionCheckInterval);
    };
  }, [shouldConnect, userId, websocket.client, websocket.ensureClient, isRetrying, toast]);

  // T·ª± ƒë·ªông k√≠ch ho·∫°t k·∫øt n·ªëi khi c√≥ userId v√† shouldConnect=true - ch·ªâ m·ªôt l·∫ßn
  useEffect(() => {
    if (!shouldConnect || !userId) return;
    
    if (hasTriedConnectionRef.current) {
      console.log("‚ÑπÔ∏è ƒê√£ th·ª≠ k·∫øt n·ªëi WebSocket tr∆∞·ªõc ƒë√≥ - kh√¥ng th·ª≠ l·∫°i");
      return;
    }
    
    hasTriedConnectionRef.current = true;
    
    if (!websocket.client) {
      console.log("‚è≥ WebSocket client ch∆∞a t·ªìn t·∫°i - th·ª≠ t·∫°o l·∫°i tr∆∞·ªõc khi k√≠ch ho·∫°t");
      if (websocket.ensureClient()) {
        console.log("‚úÖ ƒê√£ t·∫°o l·∫°i WebSocket client th√†nh c√¥ng, ti·∫øp t·ª•c k√≠ch ho·∫°t");
        if (isMountedRef.current && !connectionActivated) {
          console.log("üîÑ K√≠ch ho·∫°t k·∫øt n·ªëi WebSocket m·ªôt l·∫ßn duy nh·∫•t");
          activateConnection();
        }
      } else {
        console.log("‚ùå Kh√¥ng th·ªÉ t·∫°o WebSocket client - kh√¥ng th·ª≠ k·∫øt n·ªëi");
      }
    } else if (!connectionActivated && isMountedRef.current) {
      console.log("üîÑ K√≠ch ho·∫°t k·∫øt n·ªëi WebSocket m·ªôt l·∫ßn duy nh·∫•t");
      activateConnection();
    }
  }, [shouldConnect, userId, websocket.client, connectionActivated, activateConnection, websocket.ensureClient]);

  // ƒê·ªìng b·ªô tr·∫°ng th√°i - kh√¥ng t·ª± ƒë·ªông k√≠ch ho·∫°t l·∫°i
  useEffect(() => {
    // Ki·ªÉm tra ƒë·ªãnh k·ª≥ tr·∫°ng th√°i client v√† ƒë·ªìng b·ªô c√°c state
    if (!shouldConnect || !userId) return;
    
    const syncStateInterval = setInterval(() => {
      if (!isMountedRef.current) return;
      
      // Ki·ªÉm tra xem client c√≤n t·ªìn t·∫°i kh√¥ng v√† ki·ªÉm tra an to√†n
      const client = websocket.client;
      const clientExists = !!client;
      // Ki·ªÉm tra xem client c√≥ active kh√¥ng
      const clientActive = clientExists && client.active;
      // Ki·ªÉm tra xem connected state c√≥ ƒë·ªìng b·ªô kh√¥ng
      const isConnected = websocket.connected;
      
      // Log tr·∫°ng th√°i hi·ªán t·∫°i
      console.log(`üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i: client=${clientExists}, active=${clientActive}, connected=${isConnected}, activated=${connectionActivated}`);
      
      // ƒê·ªìng b·ªô tr·∫°ng th√°i connectionActivated v·ªõi client.active
      if (clientActive !== connectionActivated && isMountedRef.current) {
        console.log(`üîÑ C·∫≠p nh·∫≠t connectionActivated: ${connectionActivated} -> ${clientActive}`);
        setConnectionActivated(clientActive);
      }
      
      // KH√îNG t·ª± ƒë·ªông k√≠ch ho·∫°t l·∫°i n·∫øu client kh√¥ng active
    }, 15000); // Ki·ªÉm tra m·ªói 15 gi√¢y
    
    return () => {
      clearInterval(syncStateInterval);
    };
  }, [shouldConnect, userId, websocket.client, websocket.connected, connectionActivated]);

  return (
    <WebSocketContext.Provider value={{
      ...websocket,
      userId,
      client: websocket.client,
      activateConnection,
      activateConnectionWithPromise,
      connectionActivated,
      isClientActive: () => {
        return !!(websocket.client && websocket.client.active);
      },
      ensureClient: websocket.ensureClient
    }}>
      {children}
    </WebSocketContext.Provider>
  );
}; 