"use client";
import { useState, useEffect, useCallback, useRef } from "react";
import NotificationsList from "./notifications-list";
import { BellRing, Bell } from "lucide-react";
import { NotificationDto, NotificationApi } from "@/app/lib/api";
import { useWebSocketContext } from "@/components/providers/websocket-provider";
import { IMessage, StompSubscription } from "@stomp/stompjs";
// @ts-ignore ƒë·ªÉ tr√°nh l·ªói khi kh√¥ng t√¨m th·∫•y module
import { ChatMessage, MessageType } from "@/types/chat";

export default function NotificationsDropdown() {
  const [notifications, setNotifications] = useState<NotificationDto[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [hasError, setHasError] = useState(false);
  const [initialized, setInitialized] = useState(false);
  const [isSubscribed, setIsSubscribed] = useState(false);
  const lastUpdateTimeRef = useRef<number>(Date.now());

  // WebSocket subscription
  const notificationSubscriptionRef = useRef<StompSubscription | null>(null);
  const subscriptionAttempts = useRef(0);
  const subscriptionTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  // Refs ƒë·ªÉ theo d√µi ƒë√£ th·ª≠ ƒëƒÉng k√Ω hay ch∆∞a
  const hasTriedSubscriptionRef = useRef(false);
  const hasAttemptedSubscriptionRef = useRef(false);

  // WebSocket context
  const { 
    connected, 
    subscribe, 
    unsubscribe,
    userId,
    client: stompClient,
    activateConnection,
    activateConnectionWithPromise,
    connectionActivated,
    isClientActive,
    ensureClient
  } = useWebSocketContext();
  
  // Debug tr·∫°ng th√°i WebSocket
  useEffect(() => {
    const clientActive = isClientActive ? isClientActive() : false;
    console.log(`üåê Notification WebSocket Status: connected=${connected}, client exists=${!!stompClient}, client active=${clientActive}, activated=${connectionActivated}`);
    
    if (connected && clientActive) {
      console.log("‚úÖ WebSocket ƒëang ho·∫°t ƒë·ªông - th√¥ng b√°o th·ªùi gian th·ª±c s·∫Ω ho·∫°t ƒë·ªông");
    } else {
      console.log("‚ùå WebSocket kh√¥ng k·∫øt n·ªëi - th√¥ng b√°o c√≥ th·ªÉ kh√¥ng hi·ªÉn th·ªã th·ªùi gian th·ª±c");
    }
  }, [connected, stompClient, connectionActivated, isClientActive]);

  // H√†m ki·ªÉm tra k·∫øt n·ªëi WebSocket
  const checkStompConnection = useCallback(() => {
    // Nh·∫≠t k√Ω v·ªÅ tr·∫°ng th√°i k·∫øt n·ªëi hi·ªán t·∫°i
    console.log(`üåê Notification WebSocket Status: connected=${connected}, client exists=${!!stompClient}, client active=${stompClient ? stompClient.active : false}, activated=${connectionActivated}`);
    
    if (!connected || !stompClient || !stompClient.active) {
      console.log("‚ùå WebSocket kh√¥ng k·∫øt n·ªëi - th√¥ng b√°o c√≥ th·ªÉ kh√¥ng hi·ªÉn th·ªã th·ªùi gian th·ª±c");
      return false;
    }
    
    console.log("‚úÖ WebSocket ƒë√£ k·∫øt n·ªëi v√† s·∫µn s√†ng nh·∫≠n th√¥ng b√°o");
    return true;
  }, [stompClient, connected, connectionActivated]);

  // H√†m l·∫•y th√¥ng b√°o
  const fetchNotifications = useCallback(async () => {
    if (isLoading || !userId) {
      console.log("‚è≥ B·ªè qua fetch th√¥ng b√°o - ƒëang t·∫£i ho·∫∑c kh√¥ng c√≥ userId", { isLoading, userId });
      return;
    }
    
    try {
      console.log("üì• ƒêang t·∫£i th√¥ng b√°o...");
      setIsLoading(true);
      setHasError(false);
      
      // L·∫•y th√¥ng b√°o t·ª´ API
      const response = await NotificationApi.getAll();
      if (response?.content) {
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.content.length} th√¥ng b√°o`);
        setNotifications(response.content);
      }
      
      // L·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
      const count = await NotificationApi.getUnreadCount();
      console.log(`üîî C√≥ ${count} th√¥ng b√°o ch∆∞a ƒë·ªçc`);
      setUnreadCount(count);
      
      setInitialized(true);
      lastUpdateTimeRef.current = Date.now();
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y th√¥ng b√°o:", error);
      setHasError(true);
    } finally {
      setIsLoading(false);
    }
  }, [isLoading, userId]);

  // X·ª≠ l√Ω th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c t·ª´ WebSocket
  const handleNotification = useCallback((message: IMessage) => {
    try {
      console.log("üì£ Raw notification received:", message);
      console.log("üì£ Notification body:", message.body);
      
      const notification = JSON.parse(message.body) as ChatMessage;
      console.log("üì£ Parsed notification:", notification);
      
      if (notification.type === MessageType.NOTIFICATION) {
        console.log("ÔøΩÔøΩ Nh·∫≠n th√¥ng b√°o m·ªõi qua WebSocket");
        
        // TƒÉng s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
        setUnreadCount(prev => prev + 1);
        
        // C·∫≠p nh·∫≠t danh s√°ch th√¥ng b√°o n·∫øu ƒëang m·ªü dropdown
        if (isOpen) {
          console.log("üîÑ C·∫≠p nh·∫≠t danh s√°ch th√¥ng b√°o do dropdown ƒëang m·ªü");
          fetchNotifications();
        }
        
        lastUpdateTimeRef.current = Date.now();
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi x·ª≠ l√Ω th√¥ng b√°o WebSocket:", error);
    }
  }, [isOpen, fetchNotifications]);

  // Theo d√µi xem component c√≥ ƒëang unmounting hay kh√¥ng
  const isUnmountingRef = useRef(false);

  // ƒê·∫∑t tr·∫°ng th√°i unmounting khi component unmount
  useEffect(() => {
    isUnmountingRef.current = false;
    return () => {
      isUnmountingRef.current = true;
    };
  }, []);

  // ƒêƒÉng k√Ω WebSocket subscription khi k·∫øt n·ªëi th√†nh c√¥ng - ch·ªâ m·ªôt l·∫ßn duy nh·∫•t
  const attemptSubscription = useCallback(async () => {
    // Ki·ªÉm tra xem component c√≥ ƒëang unmounting kh√¥ng
    if (isUnmountingRef.current) {
      console.log("‚ö†Ô∏è Kh√¥ng th·ª≠ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o v√¨ component ƒëang unmount");
      return false;
    }

    // N·∫øu ƒë√£ th·ª≠ ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥, kh√¥ng th·ª≠ l·∫°i
    if (hasAttemptedSubscriptionRef.current) {
      console.log("‚ÑπÔ∏è ƒê√£ th·ª≠ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o tr∆∞·ªõc ƒë√≥ - kh√¥ng th·ª≠ l·∫°i t·ª± ƒë·ªông");
      return false;
    }
    
    // ƒê√°nh d·∫•u ƒë√£ th·ª≠ ƒëƒÉng k√Ω
    hasAttemptedSubscriptionRef.current = true;
    
    // Ki·ªÉm tra userId tr∆∞·ªõc
    if (!userId) {
      console.log("‚è≥ Ch∆∞a th·ªÉ ƒëƒÉng k√Ω - kh√¥ng c√≥ userId");
      return false;
    }
    
    // Tr√°nh ƒëƒÉng k√Ω khi ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng
    if (isSubscribed) {
      console.log("‚úÖ ƒê√£ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o tr∆∞·ªõc ƒë√≥");
      return true;
    }
    
    // ƒê·∫£m b·∫£o client t·ªìn t·∫°i
    if (!stompClient) {
      console.log("‚è≥ STOMP client kh√¥ng t·ªìn t·∫°i - th·ª≠ t·∫°o m·ªôt l·∫ßn");
      if (!ensureClient()) {
        console.log("‚ùå Kh√¥ng th·ªÉ t·∫°o STOMP client - kh√¥ng th·ªÉ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o");
        return false;
      }
    }

    console.log("üì≤ Chu·∫©n b·ªã ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o qua WebSocket cho user", userId);
    
    // TƒÉng s·ªë l·∫ßn th·ª≠ m·ªôt l·∫ßn duy nh·∫•t
    subscriptionAttempts.current = 1;
    console.log(`üìã Th·ª≠ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o - l·∫ßn duy nh·∫•t`);
    
    // Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
    const clientActive = isClientActive ? isClientActive() : false;
    const clientExists = !!stompClient;
    const clientReady = clientExists && clientActive && connected;
    
    console.log(`üîç Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi: clientExists=${clientExists}, clientActive=${clientActive}, connected=${connected}, connectionActivated=${connectionActivated}`);
    
    if (!clientReady) {
      console.log("‚ö†Ô∏è WebSocket ch∆∞a s·∫µn s√†ng - th·ª≠ k√≠ch ho·∫°t k·∫øt n·ªëi m·ªôt l·∫ßn duy nh·∫•t");
      
      try {
        // Ki·ªÉm tra l·∫°i xem component c√≥ ƒëang unmounting kh√¥ng
        if (isUnmountingRef.current) {
          console.log("‚ö†Ô∏è ƒê√£ ph√°t hi·ªán component unmounting trong qu√° tr√¨nh ƒëƒÉng k√Ω, h·ªßy thao t√°c");
          return false;
        }

        // S·ª≠ d·ª•ng Promise-based activation
        try {
          // ƒê·ª£i k√≠ch ho·∫°t k·∫øt n·ªëi ho√†n t·∫•t
          const success = await activateConnectionWithPromise();
          
          // Ki·ªÉm tra l·∫°i xem component c√≥ ƒëang unmounting kh√¥ng
          if (isUnmountingRef.current) {
            console.log("‚ö†Ô∏è Component ƒë√£ unmount sau khi k√≠ch ho·∫°t k·∫øt n·ªëi, h·ªßy ƒëƒÉng k√Ω");
            return false;
          }
          
          if (success) {
            console.log("‚úÖ K√≠ch ho·∫°t k·∫øt n·ªëi WebSocket th√†nh c√¥ng, ti·∫øp t·ª•c ƒëƒÉng k√Ω");
            
            // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi ·ªïn ƒë·ªãnh
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Ki·ªÉm tra l·∫°i xem component c√≥ ƒëang unmounting kh√¥ng
            if (isUnmountingRef.current) {
              console.log("‚ö†Ô∏è Component ƒë√£ unmount sau khi ƒë·ª£i k·∫øt n·ªëi ·ªïn ƒë·ªãnh, h·ªßy ƒëƒÉng k√Ω");
              return false;
            }
          } else {
            console.log("‚ùå K√≠ch ho·∫°t k·∫øt n·ªëi WebSocket kh√¥ng th√†nh c√¥ng - kh√¥ng th·ªÉ ƒëƒÉng k√Ω");
            return false;
          }
        } catch (activationError) {
          // Ki·ªÉm tra xem component c√≤n mounted kh√¥ng tr∆∞·ªõc khi log l·ªói
          if (!isUnmountingRef.current) {
            console.error("‚ùå L·ªói khi k√≠ch ho·∫°t k·∫øt n·ªëi WebSocket:", activationError);
          }
          return false;
        }
      } catch (error) {
        // Ki·ªÉm tra xem component c√≤n mounted kh√¥ng tr∆∞·ªõc khi log l·ªói
        if (!isUnmountingRef.current) {
          console.error("‚ùå L·ªói khi k√≠ch ho·∫°t k·∫øt n·ªëi:", error);
        }
        return false;
      }
    }
    
    // Ki·ªÉm tra l·∫°i m·ªôt l·∫ßn n·ªØa sau khi k√≠ch ho·∫°t v√† xem component c√≥ unmounting kh√¥ng
    if (isUnmountingRef.current) {
      console.log("‚ö†Ô∏è Component ƒë√£ unmount tr∆∞·ªõc khi ƒëƒÉng k√Ω, h·ªßy thao t√°c");
      return false;
    }
    
    // Ki·ªÉm tra l·∫°i tr·∫°ng th√°i k·∫øt n·ªëi sau khi k√≠ch ho·∫°t
    if (!(stompClient?.active && connected)) {
      console.log("‚ùå WebSocket v·∫´n ch∆∞a s·∫µn s√†ng sau khi k√≠ch ho·∫°t - kh√¥ng th·ªÉ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o");
      return false;
    }
    
    console.log("‚úÖ WebSocket ƒë√£ k·∫øt n·ªëi, ti·∫øn h√†nh ƒëƒÉng k√Ω th√¥ng b√°o");
    
    // Chuy·ªÉn ƒë·ªïi userId th√†nh string ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
    const userIdString = String(userId);
    
    // H·ªßy ƒëƒÉng k√Ω c≈© n·∫øu c√≥
    if (notificationSubscriptionRef.current) {
      console.log("üóëÔ∏è H·ªßy ƒëƒÉng k√Ω th√¥ng b√°o c≈©");
      unsubscribe(notificationSubscriptionRef.current);
      notificationSubscriptionRef.current = null;
    }
    
    // Ki·ªÉm tra l·∫°i component unmounting tr∆∞·ªõc khi ƒëƒÉng k√Ω
    if (isUnmountingRef.current) {
      console.log("‚ö†Ô∏è Component ƒë√£ unmount tr∆∞·ªõc khi ƒëƒÉng k√Ω, h·ªßy thao t√°c");
      return false;
    }
    
    try {
      // ƒê·ªãa ch·ªâ subscription
      const destination = `/user/${userIdString}/queue/notifications`;
      console.log("üì≤ ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o t·∫°i:", destination);
      
      // ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o qua WebSocket
      notificationSubscriptionRef.current = subscribe(
        destination,
        handleNotification
      );
      
      // Ki·ªÉm tra component unmounting v√† k·∫øt qu·∫£ ƒëƒÉng k√Ω
      if (isUnmountingRef.current) {
        // H·ªßy ƒëƒÉng k√Ω ngay l·∫≠p t·ª©c n·∫øu component ƒë√£ unmount
        if (notificationSubscriptionRef.current) {
          console.log("üóëÔ∏è H·ªßy ƒëƒÉng k√Ω v·ª´a th·ª±c hi·ªán do component ƒë√£ unmount");
          unsubscribe(notificationSubscriptionRef.current);
          notificationSubscriptionRef.current = null;
        }
        return false;
      }
      
      if (notificationSubscriptionRef.current) {
        console.log("‚úÖ ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o th√†nh c√¥ng:", notificationSubscriptionRef.current);
        if (!isUnmountingRef.current) {
          setIsSubscribed(true);
        }
        return true;
      } else {
        console.error("‚ùå Kh√¥ng th·ªÉ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o - kh√¥ng th·ª≠ l·∫°i t·ª± ƒë·ªông");
        return false;
      }
    } catch (error) {
      // Ch·ªâ log l·ªói n·∫øu component v·∫´n c√≤n mounted
      if (!isUnmountingRef.current) {
        console.error("‚ùå L·ªói khi ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o:", error);
      }
      return false;
    }
  }, [connected, userId, isSubscribed, subscribe, unsubscribe, handleNotification, stompClient, activateConnectionWithPromise, isClientActive, connectionActivated, ensureClient]);

  // Reset s·ªë l·∫ßn th·ª≠ khi component mount nh∆∞ng kh√¥ng th·ª≠ l·∫°i t·ª± ƒë·ªông
  useEffect(() => {
    // ƒê·∫∑t gi√° tr·ªã cho subscriptionAttempts
    subscriptionAttempts.current = 0;
    
    return () => {
      // H·ªßy ƒëƒÉng k√Ω khi component unmount
      if (notificationSubscriptionRef.current) {
        console.log("üóëÔ∏è H·ªßy ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o WebSocket khi unmount");
        unsubscribe(notificationSubscriptionRef.current);
        notificationSubscriptionRef.current = null;
        setIsSubscribed(false);
      }
      
      // X√≥a timeout n·∫øu c√≥
      if (subscriptionTimeoutRef.current) {
        clearTimeout(subscriptionTimeoutRef.current);
        subscriptionTimeoutRef.current = null;
      }
    };
  }, [unsubscribe]);

  // Ch·∫°y ƒëƒÉng k√Ω m·ªôt l·∫ßn duy nh·∫•t khi component mount
  useEffect(() => {
    if (hasTriedSubscriptionRef.current) {
      return; // Ch·ªâ th·ª≠ m·ªôt l·∫ßn
    }
    
    if (userId && stompClient && !isSubscribed && !isUnmountingRef.current) {
      console.log("üîÑ Th·ª≠ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o - m·ªôt l·∫ßn duy nh·∫•t");
      hasTriedSubscriptionRef.current = true;
      attemptSubscription().catch(error => {
        // Ch·ªâ log l·ªói n·∫øu component v·∫´n c√≤n mounted
        if (!isUnmountingRef.current) {
          console.error("‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c trong qu√° tr√¨nh ƒëƒÉng k√Ω:", error);
        }
      });
    }
  }, [userId, stompClient, isSubscribed, attemptSubscription]);

  // L·∫•y th√¥ng b√°o khi component mount v√† khi userId thay ƒë·ªïi
  useEffect(() => {
    // Ch·ªâ fetch khi c√≥ userId v√† ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
    if (userId && !initialized) {
      console.log("üöÄ Kh·ªüi t·∫°o - t·∫£i th√¥ng b√°o l·∫ßn ƒë·∫ßu");
      fetchNotifications();
    }
  }, [userId, initialized, fetchNotifications]);
  
  // Th√™m polling d·ª± ph√≤ng khi WebSocket kh√¥ng ho·∫°t ƒë·ªông
  useEffect(() => {
    const pollingInterval = setInterval(async () => {
      // Polling ch·ªâ khi kh√¥ng k·∫øt n·ªëi WebSocket ho·∫∑c khi ƒë√£ qu√° th·ªùi gian t·ª´ l·∫ßn c·∫≠p nh·∫≠t cu·ªëi
      const timeSinceLastUpdate = Date.now() - lastUpdateTimeRef.current;
      const shouldPoll = (!connected || timeSinceLastUpdate > 30000) && userId !== null;
      
      if (shouldPoll && !isLoading) {
        console.log("üîÑ Polling th√¥ng b√°o d·ª± ph√≤ng (m·ªôt l·∫ßn duy nh·∫•t, kh√¥ng retry)");
        try {
          // S·ª≠ d·ª•ng fetch tr·ª±c ti·∫øp m·ªôt l·∫ßn duy nh·∫•t thay v√¨ qua API wrapper ƒë·ªÉ tr√°nh c∆° ch·∫ø retry
          const url = `${process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:8080"}/api/notifications/count?userId=${userId}`;
          
          // S·ª≠ d·ª•ng timeout ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng ƒë·ª£i qu√° l√¢u
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 5000);
          
          const response = await fetch(url, {
            method: 'GET',
            credentials: 'include',
            signal: controller.signal
          });
          
          // X√≥a timeout
          clearTimeout(timeoutId);
          
          if (response.ok) {
            const count = await response.json();
            
            if (count !== unreadCount) {
              console.log(`üîî Ph√°t hi·ªán thay ƒë·ªïi s·ªë l∆∞·ª£ng th√¥ng b√°o: ${unreadCount} -> ${count}`);
              setUnreadCount(count);
              
              // C·∫≠p nh·∫≠t danh s√°ch th√¥ng b√°o n·∫øu ƒëang m·ªü dropdown
              if (isOpen) {
                // Khi dropdown ƒëang m·ªü, c≈©ng fetch notifications tr·ª±c ti·∫øp m·ªôt l·∫ßn duy nh·∫•t
                const notificationsUrl = `${process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:8080"}/api/notifications?userId=${userId}&page=0&size=20`;
                
                const notificationsController = new AbortController();
                const notificationsTimeoutId = setTimeout(() => notificationsController.abort(), 5000);
                
                const notificationsResponse = await fetch(notificationsUrl, {
                  method: 'GET',
                  credentials: 'include',
                  signal: notificationsController.signal
                });
                
                clearTimeout(notificationsTimeoutId);
                
                if (notificationsResponse.ok) {
                  const data = await notificationsResponse.json();
                  if (data?.content) {
                    setNotifications(data.content);
                  }
                }
              }
            }
          }
          
          lastUpdateTimeRef.current = Date.now();
        } catch (error) {
          // Log l·ªói nh∆∞ng kh√¥ng th·ª≠ l·∫°i - l·∫ßn polling ti·∫øp theo s·∫Ω th·ª≠ l·∫°i
          console.error("‚ùå L·ªói polling th√¥ng b√°o (kh√¥ng th·ª≠ l·∫°i):", error);
        }
      }
    }, 15000); // Poll m·ªói 15 gi√¢y
    
    return () => clearInterval(pollingInterval);
  }, [connected, userId, unreadCount, isOpen, isLoading, fetchNotifications]);
  
  // Khi m·ªü dropdown, l·∫•y danh s√°ch th√¥ng b√°o m·ªõi nh·∫•t
  const handleToggleDropdown = () => {
    const newState = !isOpen;
    setIsOpen(newState);
    
    if (newState && userId) {
      console.log("üì• M·ªü dropdown - t·∫£i th√¥ng b√°o m·ªõi");
      fetchNotifications();
    }
  };

  return (
    <div className="relative">
      {/* Bi·ªÉu t∆∞·ª£ng th√¥ng b√°o */}
      <button
        className="relative flex items-center justify-center w-10 h-10 rounded-full hover:bg-gray-700 transition"
        onClick={handleToggleDropdown}
      >
        {unreadCount > 0 ? (
          <BellRing className="w-6 h-6 text-white" />
        ) : (
          <Bell className="w-6 h-6 text-white" />
        )}

        {/* S·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc */}
        {unreadCount > 0 && (
          <span className="absolute top-0 right-0 h-5 w-5 bg-red-500 text-white text-xs flex items-center justify-center rounded-full">
            {unreadCount}
          </span>
        )}
      </button>

      {/* Dropdown danh s√°ch th√¥ng b√°o */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-96 bg-gray-900 rounded-lg shadow-lg border border-gray-700 overscroll-contain overflow-auto z-50">
          <div className="p-4 border-b border-gray-700">
            <div className="text-2xl font-semibold text-white">
              Th√¥ng b√°o
            </div>
          </div>
          <div className="max-h-96 overflow-y-auto">
            {isLoading ? (
              <div className="flex justify-center items-center py-8 text-gray-400">
                ƒêang t·∫£i th√¥ng b√°o...
              </div>
            ) : hasError ? (
              <div className="flex justify-center items-center py-8 text-gray-400">
                Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o. Vui l√≤ng th·ª≠ l·∫°i sau.
              </div>
            ) : notifications.length === 0 ? (
              <div className="flex justify-center items-center py-8 text-gray-400">
                Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o
              </div>
            ) : (
              <NotificationsList
                notifications={notifications}
                setNotifications={setNotifications}
                onUpdateUnread={setUnreadCount}
              />
            )}
          </div>
        </div>
      )}
    </div>
  );
}
