import React, { useEffect, useRef, useState, useCallback } from 'react';
import { Client, IMessage, IFrame, StompSubscription } from '@stomp/stompjs';
import SockJS from 'sockjs-client';

interface WebSocketHookProps {
  url?: string;
  onConnect?: (frame?: IFrame) => void;
  onDisconnect?: (frame?: IFrame) => void;
  onError?: (error: any) => void;
  reconnectDelay?: number;
  debug?: boolean;
}

interface WebSocketHookReturn {
  connected: boolean;
  connecting: boolean;
  sendMessage: (destination: string, body: any) => void;
  subscribe: (destination: string, callback: (message: IMessage) => void) => StompSubscription | null;
  unsubscribe: (subscription: StompSubscription) => void;
  client: Client | null;
  isClientActive: () => boolean;
  ensureClient: () => boolean;
  activateClientWithPromise: () => Promise<boolean>;
}

export const useWebSocket = ({
  url,
  onConnect,
  onDisconnect,
  onError,
  reconnectDelay = 5000,
  debug = false
}: WebSocketHookProps = {}): WebSocketHookReturn => {
  const [connected, setConnected] = useState(false);
  const [connecting, setConnecting] = useState(false);
  const clientRef = useRef<Client | null>(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;
  const isUnmounting = useRef(false);
  const lastActivationTime = useRef(0);
  const activationPromiseRef = useRef<{resolve: Function, reject: Function} | null>(null);

  // X√°c ƒë·ªãnh URL t·ªëi ∆∞u cho WebSocket
  const getOptimalWebSocketUrl = useCallback(() => {
    // N·∫øu URL ƒë∆∞·ª£c truy·ªÅn v√†o, s·ª≠ d·ª•ng n√≥
    if (url) return url;

    // S·ª≠ d·ª•ng URL d·ª±a tr√™n m√¥i tr∆∞·ªùng hi·ªán t·∫°i
    if (typeof window !== 'undefined') {
      const protocol = window.location.protocol === 'https:' ? 'https:' : 'http:';
      const host = window.location.host;
      // ∆Øu ti√™n d√πng URL t∆∞∆°ng ƒë·ªëi v·ªõi host hi·ªán t·∫°i
      return `${protocol}//${host}/ws`;
    }
    
    // Fallback ƒë·∫øn gi√° tr·ªã m·∫∑c ƒë·ªãnh
    return process.env.NEXT_PUBLIC_API_URL ? 
           `${process.env.NEXT_PUBLIC_API_URL}/ws` : 
           'http://localhost:8080/ws';
  }, [url]);

  // Ki·ªÉm tra xem client c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
  const isClientActive = useCallback(() => {
    return !!(clientRef.current && clientRef.current.active);
  }, []);

  // Ki·ªÉm tra xem c√≥ th·ªÉ t·∫°o k·∫øt n·ªëi ƒë∆∞·ª£c kh√¥ng (ki·ªÉm tra m·∫°ng c∆° b·∫£n)
  const checkConnectivity = useCallback(async (): Promise<boolean> => {
    try {
      const wsUrl = getOptimalWebSocketUrl();
      console.log(`üîç Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn: ${wsUrl}`);
      
      // Ki·ªÉm tra k·∫øt n·ªëi HTTP c∆° b·∫£n (kh√¥ng ph·∫£i WebSocket) ƒë·ªÉ xem server c√≥ ho·∫°t ƒë·ªông kh√¥ng
      const response = await fetch(wsUrl.replace('ws:', 'http:').replace('wss:', 'https:'), {
        method: 'HEAD',
        mode: 'no-cors' // Ch·ªâ ki·ªÉm tra xem c√≥ th·ªÉ k·∫øt n·ªëi ƒë∆∞·ª£c kh√¥ng, kh√¥ng c·∫ßn l·∫•y n·ªôi dung
      });
      
      console.log(`‚úÖ Ki·ªÉm tra k·∫øt n·ªëi th√†nh c√¥ng: c√≥ th·ªÉ k·∫øt n·ªëi ƒë·∫øn server`);
      return true;
    } catch (error) {
      console.error(`‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server: ${error}`);
      return false;
    }
  }, [getOptimalWebSocketUrl]);

  // Ng·∫Øt k·∫øt n·ªëi an to√†n
  const safeDeactivate = useCallback(() => {
    if (clientRef.current) {
      try {
        if (clientRef.current.active) {
          console.log('üîå Deactivating WebSocket client safely');
          clientRef.current.deactivate();
        }
      } catch (error) {
        console.error('‚ùå Error deactivating WebSocket client:', error);
      }
    }
  }, []);

  // Khai b√°o handleReconnect tr∆∞·ªõc - ƒë√£ lo·∫°i b·ªè c∆° ch·∫ø th·ª≠ l·∫°i t·ª± ƒë·ªông
  const handleReconnect = useCallback(() => {
    if (isUnmounting.current) {
      console.log('‚ö†Ô∏è Skip reconnect during unmount');
      return;
    }
    
    console.log('‚ÑπÔ∏è Kh√¥ng th·ª≠ k·∫øt n·ªëi l·∫°i t·ª± ƒë·ªông - c·∫•u h√¨nh ch·ªâ th·ª≠ k·∫øt n·ªëi m·ªôt l·∫ßn');
    // Kh√¥ng th·ª≠ k·∫øt n·ªëi l·∫°i t·ª± ƒë·ªông
  }, []);
  
  // Sau ƒë√≥ khai b√°o buildClient
  const buildClient = useCallback(() => {
    try {
      if (isUnmounting.current) {
        console.log('‚ö†Ô∏è Skip building client during unmount');
        return null;
      }
      
      console.log('üîß ƒêang x√¢y d·ª±ng STOMP client m·ªõi...');
      
      try {
        const finalUrl = getOptimalWebSocketUrl();
        console.log(`üîå K·∫øt n·ªëi WebSocket ƒë·∫øn: ${finalUrl}`);
        
        const client = new Client({
          webSocketFactory: () => new SockJS(finalUrl),
          connectHeaders: {},
          debug: debug ? (msg) => console.log(msg) : () => {},
          reconnectDelay,
          heartbeatIncoming: 4000,
          heartbeatOutgoing: 4000,
          onConnect: (frame: IFrame) => {
            console.log('‚úÖ WebSocket connected successfully', frame);
            if (!isUnmounting.current) {
              setConnected(true);
              setConnecting(false);
              reconnectAttempts.current = 0; // Reset reconnect attempts on successful connection
              
              // Resolve promise n·∫øu c√≥
              if (activationPromiseRef.current) {
                activationPromiseRef.current.resolve(true);
                activationPromiseRef.current = null;
              }
              
              if (onConnect) onConnect(frame);
            }
          },
          onDisconnect: (frame: IFrame) => {
            console.log('‚ö†Ô∏è WebSocket disconnected', frame);
            if (!isUnmounting.current) {
              setConnected(false);
              
              // Reject promise n·∫øu c√≥
              if (activationPromiseRef.current) {
                activationPromiseRef.current.reject(new Error('WebSocket disconnected'));
                activationPromiseRef.current = null;
              }
              
              if (onDisconnect) onDisconnect(frame);
            }
          },
          onStompError: (frame: IFrame) => {
            const error = `L·ªói STOMP: ${frame.headers['message']}`;
            console.error('‚ùå STOMP error:', error);
            
            // Reject promise n·∫øu c√≥
            if (activationPromiseRef.current) {
              activationPromiseRef.current.reject(new Error(error));
              activationPromiseRef.current = null;
            }
            
            if (onError) onError(error);
          },
          onWebSocketError: (event: Event) => {
            console.error('‚ùå WebSocket error:', event);
            
            // Reject promise n·∫øu c√≥
            if (activationPromiseRef.current) {
              activationPromiseRef.current.reject(new Error('WebSocket error'));
              activationPromiseRef.current = null;
            }
            
            if (onError) onError(event);
          },
          onWebSocketClose: (event: CloseEvent) => {
            console.log('‚ö†Ô∏è WebSocket closed:', event.code, event.reason);
            
            // Reject promise n·∫øu c√≥
            if (activationPromiseRef.current) {
              activationPromiseRef.current.reject(new Error(`WebSocket closed: ${event.code}`));
              activationPromiseRef.current = null;
            }
            
            if (event.code !== 1000 && !isUnmounting.current) { // Kh√¥ng ph·∫£i ƒë√≥ng b√¨nh th∆∞·ªùng
              handleReconnect();
            }
          }
        });
        
        console.log('‚úÖ STOMP client ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:', client ? 'true' : 'false');
        return client;
      } catch (clientError) {
        console.error('‚ùå L·ªói khi t·∫°o ƒë·ªëi t∆∞·ª£ng Client:', clientError);
        
        // Reject promise n·∫øu c√≥
        if (activationPromiseRef.current) {
          activationPromiseRef.current.reject(clientError);
          activationPromiseRef.current = null;
        }
        
        if (onError) onError(clientError);
        return null;
      }
    } catch (error) {
      console.error('‚ùå L·ªói b·∫•t ng·ªù trong buildClient:', error);
      
      // Reject promise n·∫øu c√≥
      if (activationPromiseRef.current) {
        activationPromiseRef.current.reject(error);
        activationPromiseRef.current = null;
      }
      
      if (onError) onError(error);
      return null;
    }
  }, [getOptimalWebSocketUrl, onConnect, onDisconnect, onError, reconnectDelay, debug, handleReconnect]);

  // Thi·∫øt l·∫≠p k·∫øt n·ªëi
  useEffect(() => {
    // ƒê·∫£m b·∫£o bi·∫øn isUnmounting ƒë∆∞·ª£c reset khi component mount
    isUnmounting.current = false;
    
    // Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi t·∫°o client
    checkConnectivity().then(canConnect => {
      // Ki·ªÉm tra l·∫°i xem component c√≥ ƒëang unmount kh√¥ng
      if (isUnmounting.current) {
        console.log('‚ö†Ô∏è B·ªè qua thi·∫øt l·∫≠p k·∫øt n·ªëi v√¨ component ƒëang unmount');
        return;
      }
      
      if (canConnect) {
        // T·∫°o client n·∫øu ch∆∞a c√≥
        if (!clientRef.current) {
          console.log('üì° Kh·ªüi t·∫°o STOMP client m·ªõi');
          const client = buildClient();
          if (client) {
            clientRef.current = client;
            console.log('‚úÖ STOMP client ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
          } else {
            console.error('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o STOMP client');
          }
        }
      } else {
        console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server, b·ªè qua vi·ªác t·∫°o STOMP client');
      }
    });
    
    // Kh√¥ng t·ª± ƒë·ªông k·∫øt n·ªëi t·∫°i ƒë√¢y, ƒë·ªÉ cho component g·ªçi activate()
    
    return () => {
      console.log('üßπ Cleaning up WebSocket hook');
      isUnmounting.current = true;
      
      // Ch·ªâ deactivate n·∫øu c·∫ßn thi·∫øt nh∆∞ng gi·ªØ l·∫°i client reference
      if (clientRef.current && clientRef.current.active) {
        safeDeactivate();
      }
      
      // H·ªßy activationPromise ƒëang ch·ªù n·∫øu c√≥
      if (activationPromiseRef.current) {
        console.log('üßπ H·ªßy activationPromise ƒëang ch·ªù do component unmount');
        activationPromiseRef.current.resolve(false);
        activationPromiseRef.current = null;
      }
      
      // Kh√¥ng set clientRef.current = null ƒë·ªÉ component c√≥ th·ªÉ s·ª≠ d·ª•ng l·∫°i client
      // thay v√¨ ƒë√≥, ch·ªâ ƒë√°nh d·∫•u tr·∫°ng th√°i connected = false
      setConnected(false);
    };
  }, [buildClient, safeDeactivate, checkConnectivity]);

  // Ki·ªÉm tra tr·∫°ng th√°i ƒë·ªìng b·ªô
  useEffect(() => {
    // Ki·ªÉm tra xem tr·∫°ng th√°i connected v√† client.active c√≥ ƒë·ªìng b·ªô kh√¥ng
    if (clientRef.current) {
      const clientIsActive = clientRef.current.active;
      
      // N·∫øu client is active nh∆∞ng connected = false => c·∫≠p nh·∫≠t connected
      if (clientIsActive && !connected) {
        console.log('üìä ƒê·ªìng b·ªô tr·∫°ng th√°i: client active nh∆∞ng connected = false, c·∫≠p nh·∫≠t connected = true');
        setConnected(true);
      }
      
      // N·∫øu client kh√¥ng active nh∆∞ng connected = true => c·∫≠p nh·∫≠t connected
      if (!clientIsActive && connected) {
        console.log('üìä ƒê·ªìng b·ªô tr·∫°ng th√°i: client kh√¥ng active nh∆∞ng connected = true, c·∫≠p nh·∫≠t connected = false');
        setConnected(false);
      }
    } else if (connected) {
      // Client kh√¥ng t·ªìn t·∫°i nh∆∞ng connected = true
      console.log('üìä ƒê·ªìng b·ªô tr·∫°ng th√°i: client kh√¥ng t·ªìn t·∫°i nh∆∞ng connected = true, c·∫≠p nh·∫≠t connected = false');
      setConnected(false);
    }
  }, [connected]);

  // Th√™m m·ªôt ph∆∞∆°ng th·ª©c ƒë·ªÉ t·∫°o l·∫°i client n·∫øu n√≥ kh√¥ng c√≤n t·ªìn t·∫°i
  const ensureClient = useCallback(() => {
    // Reset bi·∫øn isUnmounting tr∆∞·ªõc khi t·∫°o client m·ªõi
    isUnmounting.current = false;
    
    if (!clientRef.current) {
      console.log('üîÑ T·∫°o l·∫°i STOMP client do client hi·ªán t·∫°i kh√¥ng t·ªìn t·∫°i');
      const client = buildClient();
      if (client) {
        clientRef.current = client;
        console.log('‚úÖ STOMP client ƒë√£ ƒë∆∞·ª£c t·∫°o l·∫°i th√†nh c√¥ng');
        return true;
      } else {
        console.error('‚ùå Kh√¥ng th·ªÉ t·∫°o l·∫°i STOMP client');
        return false;
      }
    }
    return true;
  }, [buildClient]);

  // K√≠ch ho·∫°t client v√† tr·∫£ v·ªÅ Promise
  const activateClientWithPromise = useCallback((): Promise<boolean> => {
    return new Promise((resolve, reject) => {
      try {
        // Ki·ªÉm tra component unmounting - s·ª≠ d·ª•ng bi·∫øn c·ª•c b·ªô ƒë·ªÉ tr√°nh race condition
        const isComponentUnmounting = isUnmounting.current;
        if (isComponentUnmounting) {
          console.log('‚ö†Ô∏è B·ªè qua k√≠ch ho·∫°t k·∫øt n·ªëi v√¨ component ƒëang unmount');
          return resolve(false); // Tr·∫£ v·ªÅ false thay v√¨ reject ƒë·ªÉ tr√°nh l·ªói
        }
        
        // Ki·ªÉm tra n·∫øu client ƒë√£ k·∫øt n·ªëi
        if (clientRef.current && clientRef.current.connected) {
          console.log('‚úÖ WebSocket ƒë√£ k·∫øt n·ªëi s·∫µn');
          return resolve(true);
        }
        
        // Tr√°nh k√≠ch ho·∫°t li√™n t·ª•c trong th·ªùi gian ng·∫Øn
        const now = Date.now();
        if (now - lastActivationTime.current < 2000) {
          console.log('‚è≥ ƒê√£ k√≠ch ho·∫°t g·∫ßn ƒë√¢y, kh√¥ng th·ª≠ l·∫°i');
          return resolve(false); // Tr·∫£ v·ªÅ false thay v√¨ reject ƒë·ªÉ tr√°nh l·ªói
        }
        
        // C·∫≠p nh·∫≠t th·ªùi gian k√≠ch ho·∫°t
        lastActivationTime.current = now;
        
        // ƒê·∫£m b·∫£o client t·ªìn t·∫°i
        if (!clientRef.current) {
          console.log('üîÑ T·∫°o client m·ªõi cho activation');
          const newClient = buildClient();
          if (!newClient) {
            console.error('‚ùå Kh√¥ng th·ªÉ t·∫°o client WebSocket');
            return resolve(false); // Tr·∫£ v·ªÅ false thay v√¨ reject ƒë·ªÉ tr√°nh l·ªói
          }
          clientRef.current = newClient;
        }
        
        // Ki·ªÉm tra l·∫°i m·ªôt l·∫ßn n·ªØa tr∆∞·ªõc khi k√≠ch ho·∫°t
        if (isUnmounting.current) {
          console.log('‚ö†Ô∏è Ph√°t hi·ªán component unmounting trong qu√° tr√¨nh k√≠ch ho·∫°t, h·ªßy thao t√°c');
          return resolve(false);
        }
        
        console.log('üöÄ K√≠ch ho·∫°t k·∫øt n·ªëi WebSocket v·ªõi Promise - m·ªôt l·∫ßn duy nh·∫•t');
        setConnecting(true);
        
        // L∆∞u promise
        activationPromiseRef.current = { resolve, reject };
        
        // Thi·∫øt l·∫≠p timeout
        const timeoutId = setTimeout(() => {
          if (activationPromiseRef.current) {
            console.error('‚è±Ô∏è Timeout khi k√≠ch ho·∫°t WebSocket client');
            setConnecting(false);
            const promiseToReject = activationPromiseRef.current;
            activationPromiseRef.current = null;
            promiseToReject.resolve(false); // Tr·∫£ v·ªÅ false thay v√¨ reject ƒë·ªÉ tr√°nh l·ªói
          }
        }, 15000); // 15 gi√¢y timeout
        
        try {
          // K√≠ch ho·∫°t client - ch·ªâ m·ªôt l·∫ßn
          if (!isUnmounting.current) {
            clientRef.current.activate();
          } else {
            console.log('‚ö†Ô∏è Kh√¥ng k√≠ch ho·∫°t v√¨ component ƒë√£ unmount');
            clearTimeout(timeoutId);
            setConnecting(false);
            activationPromiseRef.current = null;
            return resolve(false);
          }
        } catch (activateError) {
          console.error('‚ùå L·ªói khi k√≠ch ho·∫°t client:', activateError);
          clearTimeout(timeoutId);
          setConnecting(false);
          activationPromiseRef.current = null;
          return resolve(false); // Tr·∫£ v·ªÅ false thay v√¨ reject ƒë·ªÉ tr√°nh l·ªói
        }
        
        // Cleanup timeout khi Promise ƒë∆∞·ª£c x·ª≠ l√Ω
        Promise.race([
          new Promise<void>(() => {
            // Promise n√†y kh√¥ng bao gi·ªù resolve, ch·ªâ ƒë·ªÉ gi·ªØ race m·ªü
          }),
          new Promise<void>((resolveRace) => {
            const intervalId = setInterval(() => {
              if (!activationPromiseRef.current || isUnmounting.current) {
                clearInterval(intervalId);
                clearTimeout(timeoutId);
                resolveRace();
              }
            }, 100);
          })
        ]).catch(() => {
          // B·∫Øt l·ªói n·∫øu c√≥
        });
        
      } catch (error) {
        console.error('‚ùå L·ªói ngo√†i d·ª± ki·∫øn trong activateClientWithPromise:', error);
        setConnecting(false);
        return resolve(false); // Tr·∫£ v·ªÅ false thay v√¨ reject ƒë·ªÉ tr√°nh l·ªói
      }
    });
  }, [buildClient]);

  // G·ª≠i tin nh·∫Øn
  const sendMessage = useCallback((destination: string, body: any) => {
    if (clientRef.current && clientRef.current.active && connected) {
      try {
        clientRef.current.publish({
          destination,
          body: JSON.stringify(body)
        });
      } catch (error) {
        console.error('‚ùå Error sending message:', error);
      }
    } else {
      console.warn('‚ö†Ô∏è Cannot send message: WebSocket not connected');
    }
  }, [connected]);

  // ƒêƒÉng k√Ω nh·∫≠n tin nh·∫Øn
  const subscribe = useCallback((destination: string, callback: (message: IMessage) => void): StompSubscription | null => {
    if (!clientRef.current) {
      console.error('‚ùå Cannot subscribe: STOMP client does not exist');
      return null;
    }
    
    // Ki·ªÉm tra k·∫øt n·ªëi, n·∫øu kh√¥ng active th√¨ th·ª≠ k√≠ch ho·∫°t l·∫°i
    if (!clientRef.current.active) {
      console.warn('‚ö†Ô∏è Client not active, attempting to activate before subscription');
      try {
        // Th·ª≠ activate n·∫øu client ch∆∞a active
        clientRef.current.activate();
        
        // ƒê·ª£i 1.5 gi√¢y ƒë·ªÉ k·∫øt n·ªëi ho√†n t·∫•t
        console.log(`‚è≥ Waiting for connection before subscribing to ${destination}`);
        setTimeout(() => {
          if (clientRef.current && clientRef.current.active) {
            try {
              console.log(`üì© Re-attempting subscription to ${destination} after activation`);
              const subscription = clientRef.current.subscribe(destination, (message) => {
                try {
                  callback(message);
                } catch (error) {
                  console.error('‚ùå Error in subscription callback:', error);
                }
              });
              console.log(`‚úÖ Successfully subscribed to ${destination} after activation`);
              return subscription;
            } catch (subError) {
              console.error(`‚ùå Error subscribing to ${destination} after activation:`, subError);
            }
          } else {
            console.error('‚ùå Client still not active after activation attempt');
          }
        }, 1500);
        
        // Tr·∫£ v·ªÅ null cho l·∫ßn g·ªçi ƒë·∫ßu ti√™n, subscription th·ª±c t·∫ø s·∫Ω ƒë∆∞·ª£c t·∫°o trong timeout
        return null;
      } catch (activateError) {
        console.error('‚ùå Failed to activate client before subscription:', activateError);
        return null;
      }
    }
    
    if (!connected) {
      console.error('‚ùå Cannot subscribe: WebSocket not connected');
      return null;
    }
    
    try {
      console.log(`üì© Subscribing to ${destination}`);
      const subscription = clientRef.current.subscribe(destination, (message) => {
        try {
          callback(message);
        } catch (error) {
          console.error('‚ùå Error in subscription callback:', error);
        }
      });
      console.log(`‚úÖ Successfully subscribed to ${destination}`);
      return subscription;
    } catch (error) {
      console.error(`‚ùå Error subscribing to ${destination}:`, error);
      return null;
    }
  }, [connected]);

  // H·ªßy ƒëƒÉng k√Ω
  const unsubscribe = useCallback((subscription: StompSubscription) => {
    if (subscription) {
      try {
        subscription.unsubscribe();
        console.log('‚úÖ Successfully unsubscribed');
      } catch (error) {
        console.error('‚ùå Error unsubscribing:', error);
      }
    }
  }, []);

  return {
    connected,
    connecting,
    sendMessage,
    subscribe,
    unsubscribe,
    client: clientRef.current,
    isClientActive,
    ensureClient,
    activateClientWithPromise
  };
}; 